# coding: utf-8

"""
    HRC API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Edge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'src_key': 'str',
        'dst_key': 'str',
        'bi_directional': 'bool',
        'hrc_url': 'str',
        'metadata': 'str'
    }

    attribute_map = {
        'src_key': 'src_key',
        'dst_key': 'dst_key',
        'bi_directional': 'bi-directional',
        'hrc_url': 'hrc-url',
        'metadata': 'metadata'
    }

    def __init__(self, src_key=None, dst_key=None, bi_directional=False, hrc_url=None, metadata=None):  # noqa: E501
        """Edge - a model defined in Swagger"""  # noqa: E501

        self._src_key = None
        self._dst_key = None
        self._bi_directional = None
        self._hrc_url = None
        self._metadata = None
        self.discriminator = None

        self.src_key = src_key
        self.dst_key = dst_key
        if bi_directional is not None:
            self.bi_directional = bi_directional
        if hrc_url is not None:
            self.hrc_url = hrc_url
        if metadata is not None:
            self.metadata = metadata

    @property
    def src_key(self):
        """Gets the src_key of this Edge.  # noqa: E501


        :return: The src_key of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._src_key

    @src_key.setter
    def src_key(self, src_key):
        """Sets the src_key of this Edge.


        :param src_key: The src_key of this Edge.  # noqa: E501
        :type: str
        """
        if src_key is None:
            raise ValueError("Invalid value for `src_key`, must not be `None`")  # noqa: E501

        self._src_key = src_key

    @property
    def dst_key(self):
        """Gets the dst_key of this Edge.  # noqa: E501


        :return: The dst_key of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._dst_key

    @dst_key.setter
    def dst_key(self, dst_key):
        """Sets the dst_key of this Edge.


        :param dst_key: The dst_key of this Edge.  # noqa: E501
        :type: str
        """
        if dst_key is None:
            raise ValueError("Invalid value for `dst_key`, must not be `None`")  # noqa: E501

        self._dst_key = dst_key

    @property
    def bi_directional(self):
        """Gets the bi_directional of this Edge.  # noqa: E501


        :return: The bi_directional of this Edge.  # noqa: E501
        :rtype: bool
        """
        return self._bi_directional

    @bi_directional.setter
    def bi_directional(self, bi_directional):
        """Sets the bi_directional of this Edge.


        :param bi_directional: The bi_directional of this Edge.  # noqa: E501
        :type: bool
        """

        self._bi_directional = bi_directional

    @property
    def hrc_url(self):
        """Gets the hrc_url of this Edge.  # noqa: E501


        :return: The hrc_url of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._hrc_url

    @hrc_url.setter
    def hrc_url(self, hrc_url):
        """Sets the hrc_url of this Edge.


        :param hrc_url: The hrc_url of this Edge.  # noqa: E501
        :type: str
        """

        self._hrc_url = hrc_url

    @property
    def metadata(self):
        """Gets the metadata of this Edge.  # noqa: E501


        :return: The metadata of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Edge.


        :param metadata: The metadata of this Edge.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Edge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Edge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
